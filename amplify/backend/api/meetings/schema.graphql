type Meeting {
  ExternalMeetingId: String
  MediaPlacement: MediaPlacement
  MediaRegion: String
  MeetingId: String
}

type Attendee {
  AttendeeId: String
  ExternalUserId: String
  JoinToken: String
}

type MediaPlacement {
  AudioFallbackUrl: String
  AudioHostUrl: String
  ScreenDataUrl: String
  ScreenSharingUrl: String
  ScreenViewingUrl: String
  SignalingUrl: String
  TurnControlUrl: String
}

type AttendeeAndMeeting {
  meeting: Meeting
  attendee: Attendee
  statusCode: Int
  error: AWSJSON
}

type Query {
  getOrCreateMeeting(meetingId: String): AttendeeAndMeeting @function(name: "getOrCreateConversation-${env}")
}

type Query {
  getOrCreateMeeting(meetingId: String): AttendeeAndMeeting @function(name: "getOrCreateConversation-${env}")
}

type Room @model
# @key (name: “byMeetingID”, fields: [“meetingID”, “name”, “createdAt”])
# @key (name: “byCategory”, fields: [“category”,“name”, “createdAt”])
# @key (name: “byName”, fields: [“name”, “createdAt”])
 {
  id: ID!
  meetingID: String!
  name: String!
  description: String!
  category: String!
  imageUrl: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}